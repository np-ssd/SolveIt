import React from 'react';
import { ChallengeProvider } from './ChallengeContext'; // <-- import this

function App() {
    return (
        <ChallengeProvider>  {/* <-- add this */}
            {/* your routes here */}
        </ChallengeProvider>  {/* <-- add this */}
    );
}

export default App;



challenges
import React, { useState } from "react";
import { useContext } from "react";
import { navLinksGuest, navLinksUser, navLinksAdmin } from "../solveItLinks/navLinks-solveIt-right";
import { AuthContext } from "../solveItComponents/AuthProvider";

export default function Challenges() {
    const [challengeInput1, setChallengeInput1] = useState('');
    const [challengeInput2, setChallengeInput2] = useState('');

    let userLinks = [];
    const { user, logout } = useContext(AuthContext);
    const handleLogout = () => {
    logout();
    };
    if (user) {
      if (user.role == 2) {
        userLinks = navLinksAdmin;
      }
      else if (user.role == 1) {
        userLinks = navLinksUser;
      }
      else {
        userLinks = navLinksGuest; /*(i need a new navlink)*/
      }
    }

    function handleChange1(event) {
        setChallengeInput1(event.target.value);
    }

    function handleChange2(event) {
        setChallengeInput2(event.target.value);
    }

    function SubmitChallenge1() {
        if (challengeInput1 === "7ca08393fa89108a58f6e477dc1fdc30") {
            alert("You got it for Challenge 1!");
        } else {
            alert("Try again for Challenge 1");
        }
    }

    function SubmitChallenge2() {
        if (challengeInput2 === "e4b7a2a3c5a255a2f2bd4b1227874086") {
            alert("You got it for Challenge 2!");
        } else {
            alert("Try again for Challenge 2");
        }
    }

    return (
        <>
        <link rel="stylesheet" href="../css/styles.css" />
        <link rel="stylesheet" href="../css/suka.css" />
        {user ? (
            <>
                <div className="row">
                    <div className="col-xl-12 text-center">
                        <h1 className="display-1 bold color_white content__title">Challenges<span className="vim-caret">&nbsp;</span></h1>
                        <p className="text-grey text-spacey hackerFont lead mb-5">
                            Want a go at what we offer? Try any of the challenges here!
                        </p>
                    </div>
                </div>
                <br />
                <div className="col-md-12">
                    <h4>Try these out!</h4>
                </div>

                {/* First Challenge */}
                <div className="col-md-4 mb-3 column-chal">
                    <div className="card category_web">
                        <div className="card-header solved" data-target="#problem_id_1" data-toggle="collapse" aria-expanded="true" aria-controls="problem_id_1">
                            Salad Bowl
                        </div>
                        <div id="problem_id_1" className="card-body collapse show">
                            <blockquote className="card-blockquote">
                                <p>
                                    Challenge 1: Mom said it was Xfqfi Ynrj! (Decrypt what "Xfqfi Ynrj" is and input it in MD5!) (7ca08393fa89108a58f6e477dc1fdc30)
                                </p>
                                <div className="row justify-content-center">
                                    <div className="col-12 col-sm-6 mt-2">
                                        <input type="text" value={challengeInput1} onChange={handleChange1} placeholder="Enter answer for Challenge 1" className="w-100" />
                                    </div>
                                </div>
                                <div className="row justify-content-center">
                                    <div className="col-12 col-sm-4 mt-3 key-submit">
                                        <button className="challenge-submit btn btn-outline-secondary w-100 h-100" onClick={SubmitChallenge1}>
                                            Submit
                                        </button>
                                    </div>
                                </div>
                            </blockquote>
                        </div>
                    </div>
                </div>

                {/* Second Challenge */}
                <div className="col-md-4 mb-3 column-chal">
                    <div className="card category_web">
                        <div className="card-header solved" data-target="#problem_id_2" data-toggle="collapse" aria-expanded="true" aria-controls="problem_id_2">
                            Binary Genius
                        </div>
                        <div id="problem_id_2" className="card-body collapse show">
                            <blockquote className="card-blockquote">
                                <p>
                                    Challenge 2: Convert the binary '01101000 01100101 01101100 01101100 01101111' to its ASCII representation and input its MD5 hash! (e4b7a2a3c5a255a2f2bd4b1227874086)
                                </p>
                                <div className="row justify-content-center">
                                    <div className="col-12 col-sm-6 mt-2">
                                        <input type="text" value={challengeInput2} onChange={handleChange2} placeholder="Enter answer for Challenge 2" className="w-100" />
                                    </div>
                                </div>
                                <div className="row justify-content-center">
                                    <div className="col-12 col-sm-4 mt-3 key-submit">
                                        <button className="challenge-submit btn btn-outline-secondary w-100 h-100" onClick={SubmitChallenge2}>
                                            Submit
                                        </button>
                                    </div>
                                </div>
                            </blockquote>
                        </div>
                    </div>
                </div>
            </>
        ) : (
            <>
              <div>You are not authorized to access this page/challenges.</div>
            </>
        )}
        </>
    );
}



Then update your frontend code to use Axios for API calls:

import axios from 'axios';

export const fetchUsers = async () => {
  try {
    const res = await axios.get('/api/auth/users');
    return res.data;
  } catch (error) {
    console.error('Error fetching users:', error);
  }
};

export const adminUpdateRole = async (userId, newRole) => {
  try {
    const res = await axios.put(`/api/auth/update-role/${userId}`, { role: newRole });
    return res.data;
  } catch (error) {
    console.error('Error updating role:', error);
  }
};

export const adminDeleteUser = async (userId) => {
  try {
    const res = await axios.delete(`/api/auth/delete-user/${userId}`);
    return res.data;
  } catch (error) {
    console.error('Error deleting user:', error);
  }
};


old
import axios from "axios";

const VITE_APP_API_URL = "http://localhost:8000/api/v1";

export const apiClient = axios.create({
  baseURL: VITE_APP_API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

apiClient.interceptors.request.use(
  (config) => {
    const accessToken = localStorage.getItem("access_token");
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }
    return config; 
  },
  (error) => {
    return Promise.reject(error);
  },
);

apiClient.interceptors.request.use(
  (config) => {
    const accessToken = localStorage.getItem("access_token");
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    } else {
      localStorage.removeItem("user");
      localStorage.removeItem("access_token");
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  },
);

apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response && error.response.status === 401) {
      localStorage.removeItem("user");
      localStorage.removeItem("access_token");
    }
    return Promise.reject(error);
  },
);
